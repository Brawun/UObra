/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Acceso;

import DAOs.ClientesDAO;
import DAOs.JefesDAO;
import DAOs.ObrerosDAO;
import Dominio.Clientes;
import Dominio.Jefes;
import Dominio.Obreros;
import Herramientas.Icono;
import Herramientas.Validadores;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author 52644
 */
public class RegistrarCuenta extends javax.swing.JFrame {

    // Atributos
    Validadores valida = new Validadores();
    JefesDAO JefesDAO = new JefesDAO();
    ObrerosDAO ObrerosDAO = new ObrerosDAO();
    ClientesDAO ClientesDAO = new ClientesDAO();

    /**
     * Creates new form RegistrarCuenta
     */
    public RegistrarCuenta() {
        initComponents();
        new Icono().insertarIcono(this);
        this.cbxTipoUsuario.setSelectedItem("Elija uno...");
        this.txtNombre.setText("");
        this.txtApellidoMaterno.setText("");
        this.txtApellidoPaterno.setText("");
        this.txtUsuario.setText("");
        this.txtContrasenia.setText("");
        this.txtTelefono.setText("(###) ###-####");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbxTipoUsuario = new javax.swing.JComboBox<>();
        lblTitulo = new javax.swing.JLabel();
        lblTipoUsuario = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblApellidoPaterno = new javax.swing.JLabel();
        lblApellidoMaterno = new javax.swing.JLabel();
        lblUsuario = new javax.swing.JLabel();
        lblContrasenia = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        lblInfo = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtApellidoMaterno = new javax.swing.JTextField();
        txtApellidoPaterno = new javax.swing.JTextField();
        txtContrasenia = new javax.swing.JTextField();
        txtUsuario = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        btnRegistrar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        lblInfoNombres = new javax.swing.JLabel();
        lblInfoUsuario = new javax.swing.JLabel();
        UObraLogoPeque = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Registrar Cuenta");
        setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        setResizable(false);

        cbxTipoUsuario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elija uno...", "Obrero", "Jefe", "Cliente" }));
        cbxTipoUsuario.setToolTipText("Elija un tipo de usuario");
        cbxTipoUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitulo.setText("Registrar una nueva cuenta");

        lblTipoUsuario.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTipoUsuario.setText("Tipo de Usuario:");

        lblNombre.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblNombre.setText("Nombre:");

        lblApellidoPaterno.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblApellidoPaterno.setText("Apellido paterno:");

        lblApellidoMaterno.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblApellidoMaterno.setText("Apellido materno:");

        lblUsuario.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUsuario.setText("Usuario:");

        lblContrasenia.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblContrasenia.setText("Contraseña:");

        lblTelefono.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTelefono.setText("Teléfono:");

        lblInfo.setText("Formato: (###) ###-####");

        txtNombre.setToolTipText("No utilice símbolos ni letras");
        txtNombre.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        txtApellidoMaterno.setToolTipText("No utilice símbolos ni letras");
        txtApellidoMaterno.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtApellidoMaterno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidoMaternoKeyTyped(evt);
            }
        });

        txtApellidoPaterno.setToolTipText("No utilice símbolos ni letras");
        txtApellidoPaterno.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtApellidoPaterno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidoPaternoKeyTyped(evt);
            }
        });

        txtContrasenia.setToolTipText("Max. 20 caracteres");
        txtContrasenia.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtContrasenia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtContraseniaKeyTyped(evt);
            }
        });

        txtUsuario.setToolTipText("Max. 20 caracteres");
        txtUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUsuarioKeyTyped(evt);
            }
        });

        txtTelefono.setToolTipText("Max. 14 caracteres");
        txtTelefono.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });

        btnRegistrar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.setToolTipText("Registrar nueva cuenta");
        btnRegistrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("Cancelar registro");
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        lblInfoNombres.setText("Nombres/Apellidos por separado");

        lblInfoUsuario.setText("Ingrese un usuario único");

        UObraLogoPeque.setIcon(new javax.swing.ImageIcon("D:\\Documentos\\Word\\ITSON\\3er-4to Semestre\\4°\\Pruebas de Software\\UObra\\src\\main\\java\\Multimedia\\UObraPeque.png")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(UObraLogoPeque)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelar)
                        .addGap(17, 17, 17))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(24, 24, 24)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblTipoUsuario, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblNombre, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblApellidoPaterno, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(20, 20, 20)
                                    .addComponent(lblApellidoMaterno)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblTelefono)
                                    .addComponent(lblContrasenia)
                                    .addComponent(lblUsuario))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cbxTipoUsuario, 0, 189, Short.MAX_VALUE)
                                .addComponent(txtNombre)
                                .addComponent(txtApellidoPaterno)
                                .addComponent(txtApellidoMaterno))
                            .addComponent(txtUsuario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtContrasenia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblInfoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInfoNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRegistrar)
                                .addGap(108, 108, 108)))))
                .addGap(29, 29, 29))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblTitulo)
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipoUsuario)
                    .addComponent(cbxTipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInfoNombres)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApellidoPaterno)
                    .addComponent(txtApellidoPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApellidoMaterno)
                    .addComponent(txtApellidoMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(lblInfoUsuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsuario)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContrasenia)
                    .addComponent(txtContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTelefono)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegistrar)
                            .addComponent(btnCancelar)))
                    .addComponent(UObraLogoPeque, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.setVisible(false);
        int i = JOptionPane.showConfirmDialog(this, "¿Seguro que deseas cancelar el registro? Los datos de registro no se guardarán", "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (i == JOptionPane.YES_OPTION) {
            this.dispose();
            new IniciarSesion().setVisible(true);
        } else {
            this.setVisible(true);
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        if (this.cbxTipoUsuario.getSelectedItem() == "Elija uno...") {
            JOptionPane.showMessageDialog(null, "Error: Elija un tipo de usuario válido para registro de cuenta.", "¡Error!", JOptionPane.ERROR_MESSAGE);
        } else if (this.cbxTipoUsuario.getSelectedItem() == "Obrero") {
            if (valida.validarNombre(this.txtNombre.getText()) && !this.txtNombre.getText().isBlank()) {
                if (valida.validarNombre(this.txtApellidoPaterno.getText()) && !this.txtApellidoPaterno.getText().isBlank()) {
                    if (valida.validarNombre(this.txtApellidoMaterno.getText()) && !this.txtApellidoMaterno.getText().isBlank()) {
                        if (valida.validarSinEspacios(this.txtUsuario.getText()) && !this.txtUsuario.getText().isBlank()) {
                            try {
                                if (!ObrerosDAO.verificarUsuarioObrero(this.txtUsuario.getText())) {
                                    if (valida.validarSinEspacios(this.txtContrasenia.getText()) && !this.txtContrasenia.getText().isBlank()) {
                                        if (valida.validarTelefono(this.txtTelefono.getText()) && !this.txtTelefono.getText().isBlank()) {
                                            if (this.txtContrasenia.getText().length() > 20) {
                                                this.txtContrasenia.setText(this.txtContrasenia.getText().substring(0, 20));
                                            }
                                            if (this.txtUsuario.getText().length() > 20) {
                                                this.txtUsuario.setText(this.txtUsuario.getText().substring(0, 20));
                                            }
                                            if (this.txtNombre.getText().length() > 50) {
                                                this.txtNombre.setText(this.txtNombre.getText().substring(0, 50));
                                            }
                                            if (this.txtApellidoMaterno.getText().length() > 50) {
                                                this.txtApellidoMaterno.setText(this.txtApellidoMaterno.getText().substring(0, 50));
                                            }
                                            if (this.txtApellidoPaterno.getText().length() > 50) {
                                                this.txtApellidoPaterno.setText(this.txtApellidoPaterno.getText().substring(0, 50));
                                            }
                                            if (this.txtTelefono.getText().length() > 14) {
                                                this.txtTelefono.setText(this.txtTelefono.getText().substring(0, 14));
                                            }
                                            // Se registra un obrero con los datos ingresados y con el salario mínimo, el cual puede ser posteriormente editado por un obrero
                                            Long id = ObrerosDAO.registrarObrero(new Obreros(this.txtNombre.getText(), this.txtApellidoPaterno.getText(), this.txtApellidoMaterno.getText(), this.txtTelefono.getText(), this.txtContrasenia.getText(), this.txtUsuario.getText(), (float) 200.0));
                                            if (id != null) {
                                                JOptionPane.showMessageDialog(null, "Se creó exitosamente la cuenta del obrero " + this.txtNombre.getText() + " " + this.txtApellidoPaterno.getText() + " " + this.txtApellidoMaterno.getText() + " - ID: " + id + ". ☺", "Registro de obrero exitoso", JOptionPane.INFORMATION_MESSAGE, new Icono().obtenerIcono());
                                            } else {
                                                JOptionPane.showMessageDialog(null, "Error interno: Ocurrió un errror al querer registrar la cuenta de obrero.", "¡Error interno!", JOptionPane.ERROR_MESSAGE);
                                            }
                                            this.dispose();
                                            new IniciarSesion().setVisible(true);
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Error: Capture un número de teléfono válido. (Solamente números, siguiendo el formato especificado)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Error: Llene correctamente el campo de contraseña. (No deje espacios en blanco)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Error: Elija un usuario distinto. (Usuario ya existente)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                                }
                            } catch (Exception ex) {
                                Logger.getLogger(RegistrarCuenta.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Error: Ingrese un usuario sin espacios en blanco. (Usuario con espacios en blanco)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Error: Elija un apellido materno válido. (No incluye números ni símbolos)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error: Elija un apellido paterno válido. (No incluye números ni símbolos)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error: Elija un nombre(s) válidos. (No incluyen números ni símbolos)", "¡Error!", JOptionPane.ERROR_MESSAGE);
            }
        } else if (this.cbxTipoUsuario.getSelectedItem() == "Jefe") {
            if (valida.validarNombre(this.txtNombre.getText()) && !this.txtNombre.getText().isBlank()) {
                if (valida.validarNombre(this.txtApellidoPaterno.getText()) && !this.txtApellidoPaterno.getText().isBlank()) {
                    if (valida.validarNombre(this.txtApellidoMaterno.getText()) && !this.txtApellidoMaterno.getText().isBlank()) {
                        if (valida.validarSinEspacios(this.txtUsuario.getText()) && !this.txtUsuario.getText().isBlank()) {
                            try {
                                if (!JefesDAO.verificarUsuarioJefe(this.txtUsuario.getText())) {
                                    if (valida.validarSinEspacios(this.txtContrasenia.getText()) && !this.txtContrasenia.getText().isBlank()) {
                                        if (valida.validarTelefono(this.txtTelefono.getText()) && !this.txtTelefono.getText().isBlank()) {
                                            if (this.txtContrasenia.getText().length() > 20) {
                                                this.txtContrasenia.setText(this.txtContrasenia.getText().substring(0, 20));
                                            }
                                            if (this.txtUsuario.getText().length() > 20) {
                                                this.txtUsuario.setText(this.txtUsuario.getText().substring(0, 20));
                                            }
                                            if (this.txtNombre.getText().length() > 50) {
                                                this.txtNombre.setText(this.txtNombre.getText().substring(0, 50));
                                            }
                                            if (this.txtApellidoMaterno.getText().length() > 50) {
                                                this.txtApellidoMaterno.setText(this.txtApellidoMaterno.getText().substring(0, 50));
                                            }
                                            if (this.txtApellidoPaterno.getText().length() > 50) {
                                                this.txtApellidoPaterno.setText(this.txtApellidoPaterno.getText().substring(0, 50));
                                            }
                                            if (this.txtTelefono.getText().length() > 14) {
                                                this.txtTelefono.setText(this.txtTelefono.getText().substring(0, 14));
                                            }
                                            // Se registra un jefe con los datos ingresados y con el salario mínimo, el cual puede ser posteriormente editado por un jefe
                                            Long id = JefesDAO.registrarJefe(new Jefes(this.txtNombre.getText(), this.txtApellidoPaterno.getText(), this.txtApellidoMaterno.getText(), this.txtTelefono.getText(), this.txtContrasenia.getText(), this.txtUsuario.getText()));
                                            if (id != null) {
                                                JOptionPane.showMessageDialog(null, "Se creó exitosamente la cuenta del jefe " + this.txtNombre.getText() + " " + this.txtApellidoPaterno.getText() + " " + this.txtApellidoMaterno.getText() + " - ID: " + id + ". ☺", "Registro de jefe exitoso", JOptionPane.INFORMATION_MESSAGE, new Icono().obtenerIcono());
                                            } else {
                                                JOptionPane.showMessageDialog(null, "Error interno: Ocurrió un errror al querer registrar la cuenta de jefe.", "¡Error interno!", JOptionPane.ERROR_MESSAGE);
                                            }
                                            this.dispose();
                                            new IniciarSesion().setVisible(true);
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Error: Capture un número de teléfono válido. (Solamente números, siguiendo el formato especificado)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Error: Llene correctamente el campo de contraseña. (No deje espacios en blanco)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Error: Elija un usuario distinto. (Usuario ya existente)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                                }
                            } catch (Exception ex) {
                                Logger.getLogger(RegistrarCuenta.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Error: Ingrese un usuario sin espacios en blanco. (Usuario con espacios en blanco)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Error: Elija un apellido materno válido. (No incluye números ni símbolos)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error: Elija un apellido paterno válido. (No incluye números ni símbolos)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error: Elija un nombre(s) válidos. (No incluyen números ni símbolos)", "¡Error!", JOptionPane.ERROR_MESSAGE);
            }
        } else if (this.cbxTipoUsuario.getSelectedItem() == "Cliente") {
            if (valida.validarNombre(this.txtNombre.getText()) && !this.txtNombre.getText().isBlank()) {
                if (valida.validarNombre(this.txtApellidoPaterno.getText()) && !this.txtApellidoPaterno.getText().isBlank()) {
                    if (valida.validarNombre(this.txtApellidoMaterno.getText()) && !this.txtApellidoMaterno.getText().isBlank()) {
                        if (valida.validarSinEspacios(this.txtUsuario.getText()) && !this.txtUsuario.getText().isBlank()) {
                            try {
                                if (!ClientesDAO.verificarUsuarioCliente(this.txtUsuario.getText())) {
                                    if (valida.validarSinEspacios(this.txtContrasenia.getText()) && !this.txtContrasenia.getText().isBlank()) {
                                        if (valida.validarTelefono(this.txtTelefono.getText()) && !this.txtTelefono.getText().isBlank()) {
                                            if (this.txtContrasenia.getText().length() > 20) {
                                                this.txtContrasenia.setText(this.txtContrasenia.getText().substring(0, 20));
                                            }
                                            if (this.txtUsuario.getText().length() > 20) {
                                                this.txtUsuario.setText(this.txtUsuario.getText().substring(0, 20));
                                            }
                                            if (this.txtNombre.getText().length() > 50) {
                                                this.txtNombre.setText(this.txtNombre.getText().substring(0, 50));
                                            }
                                            if (this.txtApellidoMaterno.getText().length() > 50) {
                                                this.txtApellidoMaterno.setText(this.txtApellidoMaterno.getText().substring(0, 50));
                                            }
                                            if (this.txtApellidoPaterno.getText().length() > 50) {
                                                this.txtApellidoPaterno.setText(this.txtApellidoPaterno.getText().substring(0, 50));
                                            }
                                            if (this.txtTelefono.getText().length() > 14) {
                                                this.txtTelefono.setText(this.txtTelefono.getText().substring(0, 14));
                                            }
                                            // Se registra un cliente con los datos ingresados y con el salario mínimo, el cual puede ser posteriormente editado por un cliente
                                            Long id = ClientesDAO.registrarCliente(new Clientes(this.txtNombre.getText(), this.txtApellidoPaterno.getText(), this.txtApellidoMaterno.getText(), this.txtTelefono.getText(), this.txtContrasenia.getText(), this.txtUsuario.getText()));
                                            if (id != null) {
                                                JOptionPane.showMessageDialog(null, "Se creó exitosamente la cuenta del cliente " + this.txtNombre.getText() + " " + this.txtApellidoPaterno.getText() + " " + this.txtApellidoMaterno.getText() + " - ID: " + id + ". ☺", "Registro de cliente exitoso", JOptionPane.INFORMATION_MESSAGE, new Icono().obtenerIcono());
                                            } else {
                                                JOptionPane.showMessageDialog(null, "Error interno: Ocurrió un errror al querer registrar la cuenta de cliente.", "¡Error interno!", JOptionPane.ERROR_MESSAGE);
                                            }
                                            this.dispose();
                                            new IniciarSesion().setVisible(true);
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Error: Capture un número de teléfono válido. (Solamente números, siguiendo el formato especificado)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Error: Llene correctamente el campo de contraseña. (No deje espacios en blanco)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Error: Elija un usuario distinto. (Usuario ya existente)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                                }
                            } catch (Exception ex) {
                                Logger.getLogger(RegistrarCuenta.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Error: Ingrese un usuario sin espacios en blanco. (Usuario con espacios en blanco)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Error: Elija un apellido materno válido. (No incluye números ni símbolos)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error: Elija un apellido paterno válido. (No incluye números ni símbolos)", "¡Error!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error: Elija un nombre(s) válidos. (No incluyen números ni símbolos)", "¡Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        if (txtTelefono.getText().length() >= 14) {
            evt.consume();
        }
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped

    private void txtUsuarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsuarioKeyTyped
        if (txtUsuario.getText().length() >= 20) {
            evt.consume();
        }
    }//GEN-LAST:event_txtUsuarioKeyTyped

    private void txtContraseniaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContraseniaKeyTyped
        if (txtContrasenia.getText().length() >= 20) {
            evt.consume();
        }
    }//GEN-LAST:event_txtContraseniaKeyTyped

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        if (txtNombre.getText().length() >= 50) {
            evt.consume();
        }
        char c = evt.getKeyChar();
        if (!Character.isLetter(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtApellidoPaternoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidoPaternoKeyTyped
        if (txtApellidoPaterno.getText().length() >= 50) {
            evt.consume();
        }
        char c = evt.getKeyChar();
        if (!Character.isLetter(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtApellidoPaternoKeyTyped

    private void txtApellidoMaternoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidoMaternoKeyTyped
        if (txtApellidoMaterno.getText().length() >= 50) {
            evt.consume();
        }
        char c = evt.getKeyChar();
        if (!Character.isLetter(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtApellidoMaternoKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel UObraLogoPeque;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> cbxTipoUsuario;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblApellidoMaterno;
    private javax.swing.JLabel lblApellidoPaterno;
    private javax.swing.JLabel lblContrasenia;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblInfoNombres;
    private javax.swing.JLabel lblInfoUsuario;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JLabel lblTipoUsuario;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JTextField txtApellidoMaterno;
    private javax.swing.JTextField txtApellidoPaterno;
    private javax.swing.JTextField txtContrasenia;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
