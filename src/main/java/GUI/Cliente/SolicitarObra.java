/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Cliente;

import DAOs.ClientesDAO;
import DAOs.ObrasDAO;
import DAOs.UbicacionesDAO;
import Dominio.Clientes;
import Dominio.Obras;
import Dominio.Ubicaciones;
import Enumeradores.TipoUbicacion;
import Herramientas.Fecha;
import Herramientas.Icono;
import Herramientas.Validadores;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 52644
 */
public class SolicitarObra extends javax.swing.JFrame {

    // Atributos
    Clientes cliente = new Clientes();
    Ubicaciones ubicacion = new Ubicaciones();
    ObrasDAO ObrasDAO = new ObrasDAO();
    ClientesDAO ClientesDAO = new ClientesDAO();
    UbicacionesDAO UbicacionesDAO = new UbicacionesDAO();
    Fecha fecha = new Fecha();
    Validadores valido = new Validadores();
    List<Ubicaciones> listaUbicaciones;

    /**
     * Creates new form SolicitarObra
     */
    public SolicitarObra(Clientes cliente) throws Exception {
        initComponents();
        UIManager.put("OptionPane.yesButtonText", "Aceptar");
        UIManager.put("OptionPane.noButtonText", "Cancelar");
        this.cliente = cliente;
        this.ubicacion = null;
        new Icono().insertarIcono(this);
        this.lblInsertarArea.setText("");
        this.lblInsertarDireccion.setText("");
        this.lblInsertarFecha.setText("");
        this.lblInsertarID.setText("");
        this.txtInversion.setText("1000.0");
        this.txtNombre.setText("");
        this.chxOcupar.setEnabled(false);
        this.chxOcupar.setSelected(false);
        tblUbicaciones.clearSelection();
        DefaultTableModel modeloTablaUbicaciones = (DefaultTableModel) this.tblUbicaciones.getModel();
        modeloTablaUbicaciones.setRowCount(0);
        cargarTablaUbicaciones();
    }

    public void cargarTablaUbicaciones() throws Exception {
        listaUbicaciones = UbicacionesDAO.consultarUbicacionesDisponibles(cliente);
        DefaultTableModel modeloTablaPersonas = (DefaultTableModel) this.tblUbicaciones.getModel();
        modeloTablaPersonas.setRowCount(0);
        for (Ubicaciones ubicaciones : listaUbicaciones) {
            Object[] filaNueva = {ubicaciones.getId(),
                ubicaciones.getDisponible() == true ? "Disponible" : "No disponible",
                ubicaciones.getDireccion(),
                ubicaciones.getTipo().toString(),
                ubicaciones.getArea().toString() + " m²",
                fecha.formatoFecha(ubicaciones.getFechaRegistro()),
                ubicaciones.getFechaOcupacion() != null ? fecha.formatoFecha(ubicaciones.getFechaOcupacion()) : "No aplica",
                "| Seleccionar |"};
            modeloTablaPersonas.addRow(filaNueva);
        }
        valido.centrarTabla(tblUbicaciones);
    }

    public int obtenerFila() {
        try {
            int fila = tblUbicaciones.getSelectedRow();
            if (fila == -1) {
                JOptionPane.showMessageDialog(null, "Error: Seleccione una ubicación. (De la tabla 'Ubicaciones registradas').", "¡Error!", JOptionPane.ERROR_MESSAGE);
            }
            return fila;
        } catch (Exception e) {
            Logger.getLogger(ConsultarUbicaciones.class.getName()).log(Level.SEVERE, null, e);
            return -1;
        }
    }

    public void corregirTamaños() {
        if (this.txtNombre.getText().length() > 30) {
            this.txtNombre.setText(this.txtNombre.getText().substring(0, 30));
        }
        if (this.txtInversion.getText().length() > 12) {
            this.txtInversion.setText(this.txtInversion.getText().substring(0, 12));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollPanel = new javax.swing.JScrollPane();
        tblUbicaciones = new javax.swing.JTable();
        txtNombre = new javax.swing.JTextField();
        txtInversion = new javax.swing.JTextField();
        Separador = new javax.swing.JSeparator();
        btnSolicitar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnAceptarSeleccion = new javax.swing.JButton();
        lblInversionInicial = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        UObraLogoPeque = new javax.swing.JLabel();
        lblMXN = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lbl$ = new javax.swing.JLabel();
        lblInsertarDireccion = new javax.swing.JLabel();
        lblInsertarArea = new javax.swing.JLabel();
        lblDireccion = new javax.swing.JLabel();
        lblUbicaciones = new javax.swing.JLabel();
        lblArea = new javax.swing.JLabel();
        lblFechaRegistrada = new javax.swing.JLabel();
        lblIDObra = new javax.swing.JLabel();
        lblInsertarID = new javax.swing.JLabel();
        lblInsertarFecha = new javax.swing.JLabel();
        lblInstrucción = new javax.swing.JLabel();
        lblUbicacionSeleccionada = new javax.swing.JLabel();
        chxOcupar = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Solicitar Obra");
        setResizable(false);

        ScrollPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        ScrollPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        tblUbicaciones.setBackground(new java.awt.Color(255, 255, 255));
        tblUbicaciones.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tblUbicaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Disponible", "Dirección", "Tipo", "Área", "Fecha registro", "Fecha ocupación", "Opciones"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUbicaciones.setRequestFocusEnabled(false);
        tblUbicaciones.getTableHeader().setReorderingAllowed(false);
        ScrollPanel.setViewportView(tblUbicaciones);

        txtNombre.setToolTipText("Max. 30 caracteres");
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        txtInversion.setToolTipText("Ingrese números decimales");
        txtInversion.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtInversion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInversionKeyTyped(evt);
            }
        });

        btnSolicitar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSolicitar.setText("Solicitar");
        btnSolicitar.setToolTipText("Solicitar obra");
        btnSolicitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSolicitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolicitarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("Cancelar solictud de obra");
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAceptarSeleccion.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAceptarSeleccion.setText("Aceptar selección");
        btnAceptarSeleccion.setToolTipText("Acepta la selección del primer elemento elegido");
        btnAceptarSeleccion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAceptarSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarSeleccionActionPerformed(evt);
            }
        });

        lblInversionInicial.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblInversionInicial.setText("Inversión inicial:");

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitulo.setText("Solicitar Obra");

        UObraLogoPeque.setIcon(new javax.swing.ImageIcon("D:\\Documentos\\Word\\ITSON\\3er-4to Semestre\\4°\\Pruebas de Software\\UObra\\src\\main\\java\\Multimedia\\UObraPeque.png")); // NOI18N

        lblMXN.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMXN.setText("MXN");

        lblNombre.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblNombre.setText("Nombre:");

        lbl$.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbl$.setText("$");

        lblInsertarDireccion.setText("dirección");

        lblInsertarArea.setText("area");

        lblDireccion.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDireccion.setText("Dirección:");

        lblUbicaciones.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUbicaciones.setText("Ubicaciones registradas:");

        lblArea.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblArea.setText("Área:");

        lblFechaRegistrada.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblFechaRegistrada.setText("Fecha registrada:");

        lblIDObra.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblIDObra.setText("ID:");

        lblInsertarID.setText("id");

        lblInsertarFecha.setText("fecha");

        lblInstrucción.setText("Seleccione una ubicación para ser asignada a esta obra");

        lblUbicacionSeleccionada.setText("Ubicación seleccionada:");

        chxOcupar.setText("Ocupar ubicación");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 843, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNombre, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblInversionInicial, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbl$)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtInversion, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblMXN))
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblInstrucción)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblUbicacionSeleccionada)
                                            .addComponent(chxOcupar, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblArea)
                                            .addComponent(lblIDObra, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblInsertarID)
                                            .addComponent(lblInsertarArea))
                                        .addGap(35, 35, 35)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblFechaRegistrada)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblInsertarFecha))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblDireccion)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblInsertarDireccion)))))))
                        .addContainerGap(18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUbicaciones)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAceptarSeleccion)
                        .addGap(21, 21, 21))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Separador, javax.swing.GroupLayout.PREFERRED_SIZE, 862, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UObraLogoPeque)
                .addGap(28, 28, 28))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSolicitar)
                .addGap(286, 286, 286)
                .addComponent(btnCancelar)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTitulo)
                    .addComponent(UObraLogoPeque))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Separador, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombre)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtInversion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl$)
                            .addComponent(lblMXN)
                            .addComponent(lblInversionInicial)))
                    .addComponent(lblInstrucción, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUbicacionSeleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIDObra)
                            .addComponent(lblInsertarID, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFechaRegistrada)
                            .addComponent(lblInsertarFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInsertarArea, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblArea)
                            .addComponent(lblDireccion)
                            .addComponent(lblInsertarDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chxOcupar))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblUbicaciones)
                        .addGap(16, 16, 16)
                        .addComponent(ScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnAceptarSeleccion))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSolicitar)
                    .addComponent(btnCancelar))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtInversionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInversionKeyTyped
        if (txtInversion.getText().length() >= 12) {
            evt.consume();
        }
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
        } else if (c == '.' && txtInversion.getText().contains(".")) {
            // Si ya hay un punto en el texto, no permitir otro
            evt.consume();
        }
        // Obtener el componente fuente del evento
        JTextField textField = (JTextField) evt.getSource();

        // Verificar si el evento es una operación de pegar
        if (evt.isConsumed() || evt.getKeyChar() == KeyEvent.VK_V && evt.isControlDown()) {
            // Si es una operación de pegar, cancelar el evento
            evt.consume();

            // Vaciar el contenido del campo de texto
            textField.setText("");
        }
    }//GEN-LAST:event_txtInversionKeyTyped

    private void btnAceptarSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarSeleccionActionPerformed
        try {
            int fila = obtenerFila();
            if (fila != -1) {
                this.ubicacion = UbicacionesDAO.consultarUbicacion((Long) tblUbicaciones.getValueAt(fila, 0));
                if (this.ubicacion.getTipo().equals(TipoUbicacion.SOLAR)) {
                    this.chxOcupar.setEnabled(false);
                    this.chxOcupar.setSelected(true);
                } else {
                    this.chxOcupar.setEnabled(true);
                    this.chxOcupar.setSelected(false);
                }
                this.lblInsertarArea.setText(ubicacion.getArea().toString() + " m²");
                this.lblInsertarDireccion.setText(ubicacion.getDireccion());
                this.lblInsertarFecha.setText(fecha.formatoFecha(ubicacion.getFechaRegistro()));
                this.lblInsertarID.setText(ubicacion.getId().toString());
            }
        } catch (Exception e) {
            Logger.getLogger(ConsultarUbicaciones.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnAceptarSeleccionActionPerformed

    private void btnSolicitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolicitarActionPerformed
        corregirTamaños();
        if (!txtNombre.getText().isBlank()) {
            this.txtNombre.setText(this.txtNombre.getText().trim());
            if (!txtInversion.getText().isBlank()) {
                if (this.ubicacion != null) {
                    // Se formatea inversion
                    txtInversion.setText(valido.corregirFlotante(txtInversion.getText()));
                    if (Float.parseFloat(txtInversion.getText()) <= 999) {
                        txtInversion.setText("1000.0");
                    }
                    // Se crea el objeto obra a persistir
                    List<Ubicaciones> ubicaciones = new ArrayList<>(Arrays.asList(this.ubicacion));
                    Obras obra = new Obras(
                            Float.valueOf(txtInversion.getText()),
                            txtNombre.getText(),
                            this.cliente,
                            ubicaciones);
                    Obras obraRegistrada = ObrasDAO.registrarObra(obra);
                    if (obraRegistrada.getId() != null) {
                        try {
                            if (this.chxOcupar.isSelected()) {
                                UbicacionesDAO.ocuparUbicacion(this.ubicacion.getId());
                            }
                            this.setVisible(false);
                            int i = JOptionPane.showConfirmDialog(null,
                                    "Se solicitó exitosamente la obra con..."
                                    + "\n Nombre: " + obra.getNombre()
                                    + "\n Inversión inicial: $ " + obra.getInversion() + " MXN"
                                    + "\n Fecha solicitud: " + fecha.formatoFecha(obra.getFechaSolicitada())
                                    + "\n - ID Cliente: " + obra.getCliente().getId()
                                    + "\n - ID Ubicación: " + this.ubicacion.getId()
                                    + "\n - ID Obra: " + obraRegistrada.getId()
                                    + ". ☺\n"
                                    + "\n ¿Desea solicitar otra obra?", "Solicitud de obra exitoso", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, new Icono().obtenerIcono());
                            if (i == JOptionPane.YES_OPTION) {
                                this.txtInversion.setText("");
                                this.txtNombre.setText("");
                                this.lblInsertarArea.setText("");
                                this.lblInsertarDireccion.setText("");
                                this.lblInsertarFecha.setText("");
                                this.lblInsertarID.setText("");
                                tblUbicaciones.clearSelection();
                                DefaultTableModel modeloTablaUbicaciones = (DefaultTableModel) this.tblUbicaciones.getModel();
                                modeloTablaUbicaciones.setRowCount(0);
                                this.setVisible(true);
                            } else {
                                this.dispose();
                                new PanelCliente(ClientesDAO.consultarCliente(this.cliente.getId())).setVisible(true);
                            }
                        } catch (ParseException ex) {
                            Logger.getLogger(SolicitarObra.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Error interno: Ocurrió un errror al querer solicitar la obra.", "¡Error interno!", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error: Seleccione una ubicación a la cual se le asignará esta obra.", "¡Error!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error: Ingrese una inversión válida.", "¡Error!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error: Ingrese un nombre de obra válido.", "¡Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSolicitarActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        if (txtNombre.getText().length() >= 30) {
            evt.consume();
        }
        // Obtener el componente fuente del evento
        JTextField textField = (JTextField) evt.getSource();

        // Verificar si el evento es una operación de pegar
        if (evt.isConsumed() || evt.getKeyChar() == KeyEvent.VK_V && evt.isControlDown()) {
            // Si es una operación de pegar, cancelar el evento
            evt.consume();

            // Vaciar el contenido del campo de texto
            textField.setText("");
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.setVisible(false);
        int i = JOptionPane.showConfirmDialog(this, "¿Seguro que deseas cancelar la solicitud de obra? Los datos de solicitud no se guardarán", "Advertencia", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (i == JOptionPane.YES_OPTION) {
            this.dispose();
            new PanelCliente(ClientesDAO.consultarCliente(this.cliente.getId())).setVisible(true);
        } else {
            this.setVisible(true);
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPanel;
    private javax.swing.JSeparator Separador;
    private javax.swing.JLabel UObraLogoPeque;
    private javax.swing.JButton btnAceptarSeleccion;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnSolicitar;
    private javax.swing.JCheckBox chxOcupar;
    private javax.swing.JLabel lbl$;
    private javax.swing.JLabel lblArea;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblFechaRegistrada;
    private javax.swing.JLabel lblIDObra;
    private javax.swing.JLabel lblInsertarArea;
    private javax.swing.JLabel lblInsertarDireccion;
    private javax.swing.JLabel lblInsertarFecha;
    private javax.swing.JLabel lblInsertarID;
    private javax.swing.JLabel lblInstrucción;
    private javax.swing.JLabel lblInversionInicial;
    private javax.swing.JLabel lblMXN;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblUbicacionSeleccionada;
    private javax.swing.JLabel lblUbicaciones;
    private javax.swing.JTable tblUbicaciones;
    private javax.swing.JTextField txtInversion;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
